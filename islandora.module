<?php

/**
 * @file
 * Contains islandora.module.
 *
 * This file is part of the Islandora Project.
 *
 * (c) Islandora Foundation
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author Diego Pino Navarro <dpino@metro.org> https://github.com/diegopino
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\media_entity\MediaInterface;
use Drupal\file\FileInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function islandora_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the islandora module.
    case 'help.page.islandora':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Islandora integrates Drupal with a Fedora repository.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_rdf_namespaces().
 */
function islandora_rdf_namespaces() {
  // Yes, it's amazing, rdf is not registered by default!
  return [
    'ldp'  => 'http://www.w3.org/ns/ldp#',
    'dc11' => 'http://purl.org/dc/elements/1.1/',
    'nfo' => 'http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/',
    'ebucore' => 'http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#',
    'fedora' => 'http://fedora.info/definitions/v4/repository#',
    'owl' => 'http://www.w3.org/2002/07/owl#',
    'ore' => 'http://www.openarchives.org/ore/terms/',
    'rdf' => 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'islandora' => 'http://islandora.ca/CLAW/',
    'pcdm' => 'http://pcdm.org/models#',
    'use' => 'http://pcdm.org/use#',
    'iana' => 'http://www.iana.org/assignments/relation/',
  ];
}

/**
 * Implements hook_node_insert().
 */
function islandora_node_insert(NodeInterface $node) {
  $utils = \Drupal::service('islandora.derivative_utils');

  // Execute index reactions.
  $utils->executeNodeReactions('\Drupal\islandora\Plugin\ContextReaction\IndexReaction', $node);

  // Find referenced Media and execute derivative reactions.
  $media_reference_fields = $utils->getMediaReferenceFields($node->getEntityTypeId(), $node->bundle());
  foreach (array_keys($media_reference_fields) as $field_name) {
    foreach ($node->get($field_name)->referencedEntities() as $media) {
      $utils->executeDerivativeReactions('\Drupal\islandora\Plugin\ContextReaction\DerivativeReaction', $node, $media);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function islandora_node_update(NodeInterface $node) {

  $utils = \Drupal::service('islandora.derivative_utils');
  if (!$utils->haveFieldsChanged($node, $node->original)) {
    return;
  };

  // Execute index reactions.
  $utils->executeNodeReactions('\Drupal\islandora\Plugin\ContextReaction\IndexReaction', $node);

  // Fire off derivative reactions for media just addded to an entity
  // reference field.
  $referenced_media = $utils->getNewMediaReferences($node);
  foreach ($referenced_media as $media) {
    $utils->executeDerivativeReactions('\Drupal\islandora\Plugin\ContextReaction\DerivativeReaction', $node, $media);
  }
}

/**
 * Implements hook_node_delete().
 */
function islandora_node_delete(NodeInterface $node) {
  $utils = \Drupal::service('islandora.derivative_utils');

  // Execute delete reactions.
  $utils->executeNodeReactions('\Drupal\islandora\Plugin\ContextReaction\DeleteReaction', $node);
}

/**
 * Implements hook_media_insert().
 */
function islandora_media_insert(MediaInterface $media) {
  $utils = \Drupal::service('islandora.derivative_utils');

  // Execute index reactions.
  $utils->executeMediaReactions('\Drupal\islandora\Plugin\ContextReaction\IndexReaction', $media);
}

/**
 * Implements hook_media_update().
 */
function islandora_media_update(MediaInterface $media) {
  $media_source_service = \Drupal::service('islandora.media_source_service');

  $utils = \Drupal::service('islandora.derivative_utils');
  if (!$utils->haveFieldsChanged($media, $media->original)) {
    return;
  };

  // Execute index reactions.
  $utils->executeMediaReactions('\Drupal\islandora\Plugin\ContextReaction\IndexReaction', $media);

  // Does it have a source field?
  $source_field = $media_source_service->getSourceFieldName($media->bundle());
  if (empty($source_field)) {
    return;
  }

  // Have the files changed?
  if ($media->get($source_field)->equals($media->original->get($source_field))) {
    return;
  }

  // Fire off derivative reactions for the Media.
  foreach ($utils->getReferencingNodes($media->id()) as $node) {
    $utils->executeDerivativeReactions(
      '\Drupal\islandora\Plugin\ContextReaction\DerivativeReaction',
      $node,
      $media
    );
  }
}

/**
 * Implements hook_media_delete().
 */
function islandora_media_delete(MediaInterface $media) {
  $utils = \Drupal::service('islandora.derivative_utils');

  // Execute delete reactions.
  $utils->executeMediaReactions('\Drupal\islandora\Plugin\ContextReaction\DeleteReaction', $media);
}

/**
 * Implements hook_file_insert().
 */
function islandora_file_insert(FileInterface $file) {
  $utils = \Drupal::service('islandora.derivative_utils');

  // Execute index reactions.
  $utils->executeFileReactions('\Drupal\islandora\Plugin\ContextReaction\IndexReaction', $file);
}

/**
 * Implements hook_file_update().
 */
function islandora_file_update(FileInterface $file) {
  // Exit early if unchanged.
  if ($file->filehash['sha1'] == $file->original->filehash['sha1']) {
    return;
  }

  $utils = \Drupal::service('islandora.derivative_utils');

  // Execute index reactions.
  $utils->executeFileReactions('\Drupal\islandora\Plugin\ContextReaction\IndexReaction', $file);

  // Get Media that reference this File.
  $mids = $utils->getReferencingMediaIds($file->id());

  // Filter list to Media that are referenced by Nodes.
  $filtered = array_filter(
    $mids,
    [$utils, 'mediaIsReferenced']
  );

  // Exit early if there's not referencing media that are also referenced by a
  // node.
  if (empty($filtered)) {
    return;
  }

  // Execute derivative reactions.
  $media_entities = \Drupal::service('entity_type.manager')->getStorage('media')->loadMultiple($filtered);
  foreach ($media_entities as $media) {
    foreach ($utils->getReferencingNodes($media->id()) as $node) {
      $utils->executeDerivativeReactions(
        '\Drupal\islandora\Plugin\ContextReaction\DerivativeReaction',
        $node,
        $media
      );
    }
  }
}

/**
 * Implements hook_file_delete().
 */
function islandora_file_delete(FileInterface $file) {
  $utils = \Drupal::service('islandora.derivative_utils');

  // Execute delete reactions.
  $utils->executeFileReactions('\Drupal\islandora\Plugin\ContextReaction\DeleteReaction', $file);
}

/**
 * Implements hook_jsonld_alter_normalized_array().
 */
function islandora_jsonld_alter_normalized_array(EntityInterface $entity, array &$normalized, array $context) {
  $context_manager = \Drupal::service('context.manager');
  foreach ($context_manager->getActiveReactions('\Drupal\islandora\ContextReaction\NormalizerAlterReaction') as $reaction) {
    $reaction->execute($entity, $normalized, $context);
  }
}
