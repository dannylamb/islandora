<?php

/**
 * @file
 * Contains islandora.module.
 *
 * This file is part of the Islandora Project.
 *
 * (c) Islandora Foundation
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author Diego Pino Navarro <dpino@metro.org> https://github.com/diegopino
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\media_entity\MediaInterface;
use Drupal\file\FileInterface;
use Drupal\islandora\ContextProvider\NodeContextProvider;
use Drupal\islandora\ContextProvider\MediaContextProvider;
use Drupal\islandora\ContextProvider\FileContextProvider;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function islandora_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the islandora module.
    case 'help.page.islandora':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Islandora integrates Drupal with a Fedora repository.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_modules_installed().
 */
function islandora_modules_installed($modules) {
  // Ensure the auth and serialization formats we need are available.
  if (in_array('rest', $modules)) {
    $rest_resource_config_storage = \Drupal::service('entity_type.manager')->getStorage('rest_resource_config');
    $rest_resource_config = $rest_resource_config_storage->load('entity.node');

    if ($rest_resource_config) {
      $configuration = $rest_resource_config->get('configuration');

      if (!in_array('jsonld', $configuration['formats'])) {
        $configuration['formats'][] = 'jsonld';
      }

      if (!in_array('jwt_auth', $configuration['authentication'])) {
        $configuration['authentication'][] = 'jwt_auth';
      }

      $rest_resource_config->set('configuration', $configuration);
      $rest_resource_config->save(TRUE);
    }
  }
}

/**
 * Implements hook_rdf_namespaces().
 */
function islandora_rdf_namespaces() {
  // Yes, it's amazing, rdf is not registered by default!
  return [
    'ldp'  => 'http://www.w3.org/ns/ldp#',
    'dc11' => 'http://purl.org/dc/elements/1.1/',
    'nfo' => 'http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/',
    'ebucore' => 'http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#',
    'fedora' => 'http://fedora.info/definitions/v4/repository#',
    'owl' => 'http://www.w3.org/2002/07/owl#',
    'ore' => 'http://www.openarchives.org/ore/terms/',
    'rdf' => 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'islandora' => 'http://islandora.ca/CLAW/',
    'pcdm' => 'http://pcdm.org/models#',
    'use' => 'http://pcdm.org/use#',
    'iana' => 'http://www.iana.org/assignments/relation/',
  ];
}

/**
 * Implements hook_node_insert().
 */
function islandora_node_insert(NodeInterface $node) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute index reactions
  $islandora_utils->executeNodeReactions('index', $node);

  // Find referenced Media and execute derivative reactions.
  $media_reference_fields = $islandora_utils->getMediaReferenceFields($node->getEntityTypeId(), $node->bundle());
  foreach (array_keys($media_reference_fields) as $field_name) {
    foreach ($node->get($field_name)->referencedEntities() as $media) {
      dsm("Derivatives for Media {$media->id()} triggered by Node {$node->id()} insert");
      $islandora_utils->executeMediaReactions('derivative', $media);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function islandora_node_update(NodeInterface $node) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute index reactions
  $islandora_utils->executeNodeReactions('index', $node);

  // Fire off derivative reactions for media just addded to an entity
  // reference field.
  $referenced_media = $islandora_utils->getNewMediaReferences($node);
  foreach ($referenced_media as $media) {
    dsm("Derivatives for Media {$media->id()} triggered by Node {$node->id()} update");
    $islandora_utils->executeMediaReactions('derivative', $media);
  }
}

/**
 * Implements hook_node_delete().
 */
function islandora_node_delete(NodeInterface $node) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute delete reactions
  $islandora_utils->executeNodeReactions('delete', $node);
}

/**
 * Implements hook_media_insert().
 */
function islandora_media_insert(MediaInterface $media) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute index reactions
  $islandora_utils->executeMediaReactions('index', $media);
}

/**
 * Implements hook_media_update().
 */
function islandora_media_update(MediaInterface $media) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute index reactions
  $islandora_utils->executeMediaReactions('index', $media);

  // Does it have a source field?
  $source_field = $islandora_utils->getSourceField($media->bundle());
  if (empty($source_field)) {
    return;
  }

  // Have the files changed?
  if ($media->get($source_field)->equals($media->original->get($source_field))) {
    return;
  }

  // Is the Media reference by a node? 
  if (!$islandora_utils->mediaIsReferenced($media->id())) {
    return;
  }

  // Fire off derivative reactions for the Media.
  dsm("Derivatives for Media {$media->id()} triggered by update");
  $islandora_utils->executeMediaReactions('derivative', $media);
}

/**
 * Implements hook_media_delete().
 */
function islandora_media_delete(MediaInterface $media) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute delete reactions
  $islandora_utils->executeMediaReactions('delete', $media);
}

/**
 * Implements hook_file_insert().
 */
function islandora_file_insert(FileInterface $file) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute index reactions
  $islandora_utils->executeFileReactions('index', $file);
}

/**
 * Implements hook_file_update().
 */
function islandora_file_update(FileInterface $file) {
  if ($file->filehash['sha1'] == $file->original->filehash['sha1']) {
    return;
  }

  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute index reactions
  $islandora_utils->executeFileReactions('index', $file);

  // Get Media that reference this File.
  $mids = $islandora_utils->getReferencingMediaIds($file->id());

  // Filter list to Media that are referenced by Nodes.
  $filtered = array_filter(
    $mids,
    [$islandora_utils, 'mediaIsReferenced']
  );

  // Exit early if there's not referencing media that are also referenced by a
  // node.
  if (empty($filtered)) {
    return;
  }

  // Execute derivative reactions
  $media_entities = \Drupal::service('entity_type.manager')->getStorage('media')->loadMultiple($filtered);
  foreach ($media_entities as $media) {
    \Drupal::logger('islandora')->debug("Derivatives for Media {$media->id()} triggered by File {$file->id()} update");
    $islandora_utils->executeMediaReactions('derivative', $media);
  }
}

/**
 * Implements hook_file_delete().
 */
function islandora_file_delete(FileInterface $file) {
  $islandora_utils = \Drupal::service('islandora.utils');

  // Execute delete reactions
  $islandora_utils->executeFileReactions('delete', $file);
}

/**
 * Implements hook_node_view_alter().
 */
function islandora_node_view_alter(&$build, EntityInterface $entity) {
  // Return if memberof field does not exist.
  if ($entity->hasField('field_memberof') == FALSE) {
    return;
  }

  // Return if memberof field has no values.
  $collection_members = $entity->get('field_memberof')->getValue();
  if (count($collection_members) == 0) {
    return;
  }

  // Loop through each member and add to the collection_links.
  $collection_links = [];
  foreach ($collection_members as $member_info) {
    $collection_id = $member_info['target_id'];
    $collection_entity = $entity->load($collection_id);

    // If collection entity does not exist, skip.
    if ($collection_entity == NULL) {
      continue;
    }

    // If entity bundle type is not Collection, skip.
    $collection_entity_bundle = $collection_entity->bundle();
    if ($collection_entity_bundle != "islandora_collection") {
      continue;
    }

    $collection_entity_url = $collection_entity->url('canonical', ['absolute' => TRUE]);
    array_push($collection_links, "<" . $collection_entity_url . ">; rel='collection'");
  }

  if (count($collection_links) > 0) {
    $collection_links_str = implode(", ", $collection_links);
    $build['#attached']['http_header'] = [
      ['Link', $collection_links_str],
    ];
  }
}
